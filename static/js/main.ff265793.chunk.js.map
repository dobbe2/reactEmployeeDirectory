{"version":3,"sources":["pages/HomePage.js","components/EmployeeList/index.js","utils/API.js","components/Header/index.js","components/SearchBar/index.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","EmployeeList","props","style","margin","borderRadius","width","alt","name","src","image","height","float","borderTopLeftRadius","borderBottomLeftRadius","marginTop","phone","email","axios","get","Header","SearchBar","onChange","handleInputChange","value","search","type","placeholder","id","onClick","handleFormSubmit","App","state","employees","searchEmployees","console","log","this","API","then","res","setState","data","results","catch","err","map","employee","key","first","last","picture","medium","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8SAUeA,MARf,WACI,OACI,6BACI,wBAAIC,UAAU,UAAd,wB,YCYGC,MAdf,SAAsBC,GAClB,OACI,yBAAKF,UAAU,OAAOG,MAAO,CAACC,OAAQ,YAAaC,aAAa,OAAQC,MAAM,QAC1E,yBAAKN,UAAU,aACP,yBAAKO,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOP,MAAO,CAACQ,OAAO,IAAKC,MAAM,OAAQC,oBAAoB,OAAQC,uBAAuB,UACzH,wBAAIX,MAAO,CAACY,UAAW,SAAS,yCAAhC,IAAwDb,EAAMM,MAC9D,2BAAG,iDAAH,IAAmCN,EAAMc,OACzC,2BAAG,0CAAH,IAA4Bd,EAAMe,U,iBCR3C,EACI,WACX,OAAOC,IAAMC,IAAI,uFCIVC,MANf,SAAgBlB,GACZ,OACI,4BAAQC,MAAO,CAACC,OAAO,SAAvB,kBCiBOiB,MAlBf,SAAmBnB,GACf,OACA,yBAAKC,MAAO,CAACC,OAAO,SAChB,2BACAkB,SAAUpB,EAAMqB,kBAChBC,MAAOtB,EAAMuB,OACbC,KAAK,OACLlB,KAAK,SACLmB,YAAY,uBACZC,GAAG,WAEH,4BAAQC,QAAS3B,EAAM4B,kBAAvB,YCoDOC,E,4MAxDbC,MAAQ,CACNC,UAAW,GACXC,gBAAiB,I,kEAKE,IAAD,OAClBC,QAAQC,IAAIC,KAAKL,OACjBM,IACGC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAER,UAAWO,EAAIE,KAAKC,UACpCR,QAAQC,IAAII,EAAIE,KAAKC,SACrBR,QAAQC,IAAI,EAAKJ,UAElBY,OAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,Q,+BAkB5B,OACE,6BACE,kBAAC,EAAD,MACE,kBAAC,EAAD,CACApB,OAAQY,KAAKL,MAAMP,OACnBK,iBAAkBO,KAAKP,iBACvBP,kBAAmBc,KAAKd,oBACtB,kBAAC,EAAD,MACGc,KAAKL,MAAMC,UAAUa,KAAI,SAAAC,GAAQ,OAChC,kBAAC,EAAD,CACEnB,GAAImB,EAASnB,GACboB,IAAKD,EAASC,IACdxC,KAAMuC,EAASvC,KAAKyC,MAAQ,IAAMF,EAASvC,KAAK0C,KAChDlC,MAAO+B,EAAS/B,MAChBC,MAAO8B,EAAS9B,MAChBP,MAAOqC,EAASI,QAAQC,iB,GAlDxBC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.ff265793.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction HomePage() {\n    return (\n        <div>\n            <h1 className=\"header\">Employee Directory</h1>\n        </div>\n    )\n}\n\nexport default HomePage;","import React from \"react\";\nimport \"./style.css\"\n\nfunction EmployeeList(props) {\n    return (\n        <div className=\"card\" style={{margin: \"10px auto\", borderRadius:\"30px\", width:\"60%\"}}>\n            <div className=\"conatiner\">\n                    <img alt={props.name} src={props.image} style={{height:130, float:\"left\", borderTopLeftRadius:\"30px\", borderBottomLeftRadius:\"30px\"}}/>\n                        <h4 style={{marginTop: \"12px\"}}><strong>Name:</strong> {props.name}</h4>\n                        <p><strong>Phone Number:</strong> {props.phone}</p>\n                        <p><strong>Email:</strong> {props.email}</p>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default EmployeeList;","import axios from \"axios\";\n\nexport default {\n    getRandomUsers:function() {\n        return axios.get(\"https://randomuser.me/api/?results=100&nat=us&inc=name,email,phone,cell,picture,id\")\n    }\n}","import React from \"react\";\n\nfunction Header(props) {\n    return (\n        <header style={{margin:\"20px\"}}>Employee List</header>\n    )\n}\n\nexport default Header;","\nimport React from \"react\";\n\nfunction SearchBar(props) {\n    return (\n    <div style={{margin:\"20px\"}}>\n        <input \n        onChange={props.handleInputChange}\n        value={props.search}\n        type=\"text\" \n        name=\"search\" \n        placeholder=\"Search Employee Here\"\n        id=\"search\" \n        />\n        <button onClick={props.handleFormSubmit}>\n        Search\n        </button>\n    </div>\n    )\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport HomePage from \"./pages/HomePage\";\nimport './App.css';\nimport EmployeeList from \"./components/EmployeeList\";\nimport API from \"./utils/API\";\nimport Header from \"./components/Header\"\nimport SearchBar from \"./components/SearchBar\"\n\nclass App extends Component {\n\n  state = {\n    employees: [],\n    searchEmployees: []\n  };\n  \n\n  //when the component mounts, run API function\n  componentDidMount() {\n    console.log(this.state)\n    API.getRandomUsers()\n      .then(res => {\n        this.setState({ employees: res.data.results })\n        console.log(res.data.results);\n        console.log(this.state)\n      })\n      .catch(err => console.log(err));\n  };\n  \n\n//  handleInputChange = event => {\n//    const name = event.target.name;\n//    const value = event.target.value;\n//    this.setState({\n//      [name]: value\n//    });\n//  };\n\n//  handleFormSubmit = event => {\n//    event.preventDefault();\n//    this.API.getRandomUsers(this.state.search)\n//  };\n\n  render() {\n    return (\n      <div>\n        <HomePage />\n          <SearchBar\n          search={this.state.search}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange} />\n            <Header />\n              {this.state.employees.map(employee => (\n                <EmployeeList\n                  id={employee.id}\n                  key={employee.key}\n                  name={employee.name.first + \" \" + employee.name.last}\n                  phone={employee.phone}\n                  email={employee.email}\n                  image={employee.picture.medium}\n                />\n            ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}